{"version":3,"sources":["../src/index.js"],"names":["isURL","str","pattern","RegExp","test","BootcampChat","config","app","initializeApp","db","database","data","name","message","image","Promise","resolve","reject","undefined","length","body","key","ref","push","set","createdAt","ServerValue","TIMESTAMP","then","id","callback","messages","on","val"],"mappings":";;;;;;;;;;AAAA;;;;;;;;AAEA,SAASA,KAAT,CAAeC,GAAf,EAAoB;AAClB,MAAIC,UAAU,IAAIC,MAAJ,CACZ,sBAAsB;AACtB,qDADA,GACsD;AACtD,+BAFA,GAEgC;AAChC,mCAHA,GAGoC;AACpC,4BAJA,GAI6B;AAC3B,sBANU,EAOZ,GAPY,CAAd,CADkB,CAShB;AACF,SAAOD,QAAQE,IAAR,CAAaH,GAAb,CAAP;AACD;;IAEoBI,Y;AACnB,wBAAYC,MAAZ,EAAoB;AAAA;;AAClB,QAAMC,MAAM,mBAASC,aAAT,CAAuBF,MAAvB,CAAZ;AACA,SAAKG,EAAL,GAAUF,IAAIG,QAAJ,EAAV;AACD;;;;yBAEIC,I,EAAM;AAAA;;AAAA,UACDC,IADC,GACwBD,IADxB,CACDC,IADC;AAAA,UACKC,OADL,GACwBF,IADxB,CACKE,OADL;AAAA,UACcC,KADd,GACwBH,IADxB,CACcG,KADd;;AAET,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIN,SAASO,SAAb,EAAwB;AACtB,gBAAM,qBAAN;AACD;AACD,YAAIN,SAASM,SAAT,IAAsBN,KAAKO,MAAL,GAAc,CAApC,IAAyC,OAAOP,IAAP,KAAgB,QAA7D,EAAuE;AACrE,gBAAM,+BAAN;AACD;;AAED,YAAMQ,OAAO,EAAb;;AAEA,YAAKP,YAAYK,SAAb,GAA2BJ,UAAUI,SAAzC,EAAqD;AACnD,gBAAM,iDAAN;AACD,SAFD,MAEO;AACL,cAAIL,YAAYK,SAAZ,IAAyBL,QAAQM,MAAR,GAAiB,CAA9C,EAAiD;AAC/CC,iBAAKP,OAAL,GAAeA,OAAf;AACD,WAFD,MAEO;AACL,kBAAM,iCAAN;AACD;AACD,cAAIC,UAAUI,SAAd,EAAyB;AACvB,gBAAIlB,MAAMc,KAAN,CAAJ,EAAkB;AAChBM,mBAAKN,KAAL,GAAaA,KAAb;AACD,aAFD,MAEO;AACL,oBAAM,8BAAN;AACD;AACF;AACF;;AAED,YAAIO,MAAM,MAAKZ,EAAL,CAAQa,GAAR,CAAY,UAAZ,EAAwBC,IAAxB,GAA+BF,GAAzC;AACA,cAAKZ,EAAL,CACGa,GADH,eACmBD,GADnB,EAEGG,GAFH;AAGIZ;AAHJ,WAIOQ,IAJP;AAKIK,qBAAW,mBAASf,QAAT,CAAkBgB,WAAlB,CAA8BC;AAL7C,YAOGC,IAPH,CAOQ,YAAM;AACVZ,kBAAQ,EAAEa,IAAIR,GAAN,EAAR;AACD,SATH;AAUD,OAtCM,CAAP;AAuCD;;;8BAESS,Q,EAAU;AAClB,UAAIC,WAAW,KAAKtB,EAAL,CAAQa,GAAR,CAAY,UAAZ,CAAf;AACAS,eAASC,EAAT,CAAY,aAAZ,EAA2B,UAASrB,IAAT,EAAe;AACxC,YAAMkB,KAAKlB,KAAKU,GAAhB;AACA,YAAMR,UAAUF,KAAKsB,GAAL,EAAhB;AACAH,iBAASD,EAAT,EAAahB,OAAb;AACD,OAJD;AAKD;;;;;;kBAxDkBR,Y","file":"index.js","sourcesContent":["import firebase from 'firebase'\n\nfunction isURL(str) {\n  var pattern = new RegExp(\n    '^(https?:\\\\/\\\\/)?' + // protocol\n    '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.?)+[a-z]{2,}|' + // domain name\n    '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n    '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n    '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n      '(\\\\#[-a-z\\\\d_]*)?$',\n    'i'\n  ) // fragment locator\n  return pattern.test(str)\n}\n\nexport default class BootcampChat {\n  constructor(config) {\n    const app = firebase.initializeApp(config)\n    this.db = app.database()\n  }\n\n  send(data) {\n    const { name, message, image } = data\n    return new Promise((resolve, reject) => {\n      if (data === undefined) {\n        throw 'Must send a message'\n      }\n      if (name === undefined || name.length < 4 || typeof name !== 'string') {\n        throw 'Name must be at least 4 chars'\n      }\n\n      const body = {}\n\n      if ((message === undefined) & (image === undefined)) {\n        throw 'Either a message or image url must be specified'\n      } else {\n        if (message !== undefined && message.length > 0) {\n          body.message = message\n        } else {\n          throw 'Message must be at least 1 char'\n        }\n        if (image !== undefined) {\n          if (isURL(image)) {\n            body.image = image\n          } else {\n            throw 'Optional image must be a URL'\n          }\n        }\n      }\n\n      let key = this.db.ref('messages').push().key\n      this.db\n        .ref(`messages/${key}`)\n        .set({\n          name,\n          ...body,\n          createdAt: firebase.database.ServerValue.TIMESTAMP\n        })\n        .then(() => {\n          resolve({ id: key })\n        })\n    })\n  }\n\n  onMessage(callback) {\n    var messages = this.db.ref('messages')\n    messages.on('child_added', function(data) {\n      const id = data.key\n      const message = data.val()\n      callback(id, message)\n    })\n  }\n}\n"]}