'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _firebase = require('firebase');

var _firebase2 = _interopRequireDefault(_firebase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function isURL(str) {
  var pattern = new RegExp('^(https?:\\/\\/)?' + // protocol
  '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|' + // domain name
  '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
  '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
  '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
  '(\\#[-a-z\\d_]*)?$', 'i'); // fragment locator
  return pattern.test(str);
}

var BootcampChat = function () {
  function BootcampChat(config) {
    _classCallCheck(this, BootcampChat);

    var app = _firebase2.default.initializeApp(config);
    this.db = app.database();
  }

  _createClass(BootcampChat, [{
    key: 'send',
    value: function send(data) {
      var _this = this;

      var name = data.name,
          message = data.message,
          image = data.image;

      return new Promise(function (resolve, reject) {
        if (data === undefined) {
          throw 'Must send a message';
        }
        if (name === undefined || name.length < 4 || typeof name !== 'string') {
          throw 'Name must be at least 4 chars';
        }

        var body = {};

        if (message === undefined & image === undefined) {
          throw 'Either a message or image url must be specified';
        } else {
          if (message !== undefined && message.length > 0) {
            body.message = message;
          } else {
            throw 'Message must be at least 1 char';
          }
          if (image !== undefined) {
            if (isURL(image)) {
              body.image = image;
            } else {
              throw 'Optional image must be a URL';
            }
          }
        }

        var key = _this.db.ref('messages').push().key;
        _this.db.ref('messages/' + key).set(_extends({
          name: name
        }, body, {
          createdAt: _firebase2.default.database.ServerValue.TIMESTAMP
        })).then(function () {
          resolve({ id: key });
        });
      });
    }
  }, {
    key: 'onMessage',
    value: function onMessage(callback) {
      var messages = this.db.ref('messages');
      messages.on('child_added', function (data) {
        var id = data.key;
        var message = data.val();
        callback(id, message);
      });
    }
  }]);

  return BootcampChat;
}();

exports.default = BootcampChat;
//# sourceMappingURL=index.js.map